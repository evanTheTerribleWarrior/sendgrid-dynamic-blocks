{"version":3,"file":"static/js/ajs-destination.890ad143.chunk.js","mappings":"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","sources":["../node_modules/@segment/analytics-next/src/lib/is-plan-event-enabled.ts","../node_modules/@segment/analytics-next/src/plugins/ajs-destination/loader.ts","../node_modules/@segment/analytics-next/src/plugins/ajs-destination/utils.ts","../node_modules/@segment/analytics-next/src/plugins/ajs-destination/index.ts"],"sourcesContent":["import { PlanEvent, TrackPlan } from '../core/events/interfaces'\n\n/**\n * Determines whether a track event is allowed to be sent based on the\n * user's tracking plan.\n * If the user does not have a tracking plan or the event is allowed based\n * on the tracking plan configuration, returns true.\n */\nexport function isPlanEventEnabled(\n  plan: TrackPlan | undefined,\n  planEvent: PlanEvent | undefined\n): boolean {\n  // Always prioritize the event's `enabled` status\n  if (typeof planEvent?.enabled === 'boolean') {\n    return planEvent.enabled\n  }\n\n  // Assume absence of a tracking plan means events are enabled\n  return plan?.__default?.enabled ?? true\n}\n","import { Analytics } from '../../core/analytics'\nimport { LegacyIntegrationConfiguration } from '../../browser'\nimport { getNextIntegrationsURL } from '../../lib/parse-cdn'\nimport { Context } from '../../core/context'\nimport { User } from '../../core/user'\nimport { loadScript, unloadScript } from '../../lib/load-script'\nimport {\n  LegacyIntegration,\n  ClassicIntegrationBuilder,\n  ClassicIntegrationSource,\n} from './types'\n\nfunction normalizeName(name: string): string {\n  return name.toLowerCase().replace('.', '').replace(/\\s+/g, '-')\n}\n\nfunction obfuscatePathName(pathName: string, obfuscate = false): string | void {\n  return obfuscate ? btoa(pathName).replace(/=/g, '') : undefined\n}\n\nexport function resolveIntegrationNameFromSource(\n  integrationSource: ClassicIntegrationSource\n) {\n  return (\n    'Integration' in integrationSource\n      ? integrationSource.Integration\n      : integrationSource\n  ).prototype.name\n}\n\nfunction recordLoadMetrics(fullPath: string, ctx: Context, name: string): void {\n  try {\n    const [metric] =\n      window?.performance?.getEntriesByName(fullPath, 'resource') ?? []\n    // we assume everything that took under 100ms is cached\n    metric &&\n      ctx.stats.gauge('legacy_destination_time', Math.round(metric.duration), [\n        name,\n        ...(metric.duration < 100 ? ['cached'] : []),\n      ])\n  } catch (_) {\n    // not available\n  }\n}\n\nexport function buildIntegration(\n  integrationSource: ClassicIntegrationSource,\n  integrationSettings: { [key: string]: any },\n  analyticsInstance: Analytics\n): LegacyIntegration {\n  let integrationCtr: ClassicIntegrationBuilder\n  // GA and Appcues use a different interface to instantiating integrations\n  if ('Integration' in integrationSource) {\n    const analyticsStub = {\n      user: (): User => analyticsInstance.user(),\n      addIntegration: (): void => {},\n    }\n\n    integrationSource(analyticsStub)\n    integrationCtr = integrationSource.Integration\n  } else {\n    integrationCtr = integrationSource\n  }\n\n  const integration = new integrationCtr(integrationSettings)\n  integration.analytics = analyticsInstance\n  return integration\n}\n\nexport async function loadIntegration(\n  ctx: Context,\n  name: string,\n  version: string,\n  obfuscate?: boolean\n): Promise<ClassicIntegrationSource> {\n  const pathName = normalizeName(name)\n  const obfuscatedPathName = obfuscatePathName(pathName, obfuscate)\n  const path = getNextIntegrationsURL()\n\n  const fullPath = `${path}/integrations/${\n    obfuscatedPathName ?? pathName\n  }/${version}/${obfuscatedPathName ?? pathName}.dynamic.js.gz`\n\n  try {\n    await loadScript(fullPath)\n    recordLoadMetrics(fullPath, ctx, name)\n  } catch (err) {\n    ctx.stats.gauge('legacy_destination_time', -1, [`plugin:${name}`, `failed`])\n    throw err\n  }\n\n  // @ts-ignore\n  const deps: string[] = window[`${pathName}Deps`]\n  await Promise.all(deps.map((dep) => loadScript(path + dep + '.gz')))\n\n  // @ts-ignore\n  window[`${pathName}Loader`]()\n\n  return window[\n    // @ts-ignore\n    `${pathName}Integration`\n  ] as ClassicIntegrationSource\n}\n\nexport async function unloadIntegration(\n  name: string,\n  version: string,\n  obfuscate?: boolean\n): Promise<void> {\n  const path = getNextIntegrationsURL()\n  const pathName = normalizeName(name)\n  const obfuscatedPathName = obfuscatePathName(name, obfuscate)\n\n  const fullPath = `${path}/integrations/${\n    obfuscatedPathName ?? pathName\n  }/${version}/${obfuscatedPathName ?? pathName}.dynamic.js.gz`\n\n  return unloadScript(fullPath)\n}\n\nexport function resolveVersion(\n  settings?: LegacyIntegrationConfiguration\n): string {\n  return (\n    settings?.versionSettings?.override ??\n    settings?.versionSettings?.version ??\n    'latest'\n  )\n}\n","import { Integrations } from '@segment/analytics-core'\nimport { LegacyIntegrationConfiguration } from '../..'\n\nexport const isInstallableIntegration = (\n  name: string,\n  integrationSettings: LegacyIntegrationConfiguration\n) => {\n  const { type, bundlingStatus, versionSettings } = integrationSettings\n  // We use `!== 'unbundled'` (versus `=== 'bundled'`) to be inclusive of\n  // destinations without a defined value for `bundlingStatus`\n  const deviceMode =\n    bundlingStatus !== 'unbundled' &&\n    (type === 'browser' || versionSettings?.componentTypes?.includes('browser'))\n\n  // checking for iterable is a quick fix we need in place to prevent\n  // errors showing Iterable as a failed destiantion. Ideally, we should\n  // fix the Iterable metadata instead, but that's a longer process.\n  return !name.startsWith('Segment') && name !== 'Iterable' && deviceMode\n}\n\nexport const isDisabledIntegration = (\n  integrationName: string,\n  globalIntegrations: Integrations\n) => {\n  const allDisableAndNotDefined =\n    globalIntegrations.All === false &&\n    globalIntegrations[integrationName] === undefined\n\n  return (\n    globalIntegrations[integrationName] === false || allDisableAndNotDefined\n  )\n}\n","import { Integrations, JSONObject } from '../../core/events'\nimport { Alias, Facade, Group, Identify, Page, Track } from '@segment/facade'\nimport { Analytics, InitOptions } from '../../core/analytics'\nimport { LegacySettings } from '../../browser'\nimport { isOffline, isOnline } from '../../core/connection'\nimport { Context, ContextCancelation } from '../../core/context'\nimport { isServer } from '../../core/environment'\nimport { DestinationPlugin, Plugin } from '../../core/plugin'\nimport { attempt } from '@segment/analytics-core'\nimport { isPlanEventEnabled } from '../../lib/is-plan-event-enabled'\nimport { mergedOptions } from '../../lib/merged-options'\nimport { pWhile } from '../../lib/p-while'\nimport { PriorityQueue } from '../../lib/priority-queue'\nimport { PersistedPriorityQueue } from '../../lib/priority-queue/persisted'\nimport {\n  applyDestinationMiddleware,\n  DestinationMiddlewareFunction,\n} from '../middleware'\nimport {\n  buildIntegration,\n  loadIntegration,\n  resolveIntegrationNameFromSource,\n  resolveVersion,\n  unloadIntegration,\n} from './loader'\nimport { LegacyIntegration, ClassicIntegrationSource } from './types'\nimport { isPlainObject } from '@segment/analytics-core'\nimport {\n  isDisabledIntegration as shouldSkipIntegration,\n  isInstallableIntegration,\n} from './utils'\n\nexport type ClassType<T> = new (...args: unknown[]) => T\n\nasync function flushQueue(\n  xt: Plugin,\n  queue: PriorityQueue<Context>\n): Promise<PriorityQueue<Context>> {\n  const failedQueue: Context[] = []\n\n  if (isOffline()) {\n    return queue\n  }\n\n  await pWhile(\n    () => queue.length > 0 && isOnline(),\n    async () => {\n      const ctx = queue.pop()\n      if (!ctx) {\n        return\n      }\n\n      const result = await attempt(ctx, xt)\n      const success = result instanceof Context\n      if (!success) {\n        failedQueue.push(ctx)\n      }\n    }\n  )\n\n  // re-add failed tasks\n  failedQueue.map((failed) => queue.pushWithBackoff(failed))\n  return queue\n}\n\nexport class LegacyDestination implements DestinationPlugin {\n  name: string\n  version: string\n  settings: JSONObject\n  options: InitOptions = {}\n  type: Plugin['type'] = 'destination'\n  middleware: DestinationMiddlewareFunction[] = []\n\n  private _ready = false\n  private _initialized = false\n  private onReady: Promise<unknown> | undefined\n  private onInitialize: Promise<unknown> | undefined\n  private disableAutoISOConversion: boolean\n\n  integrationSource?: ClassicIntegrationSource\n  integration: LegacyIntegration | undefined\n\n  buffer: PriorityQueue<Context>\n  flushing = false\n\n  constructor(\n    name: string,\n    version: string,\n    writeKey: string,\n    settings: JSONObject = {},\n    options: InitOptions,\n    integrationSource?: ClassicIntegrationSource\n  ) {\n    this.name = name\n    this.version = version\n    this.settings = { ...settings }\n    this.disableAutoISOConversion = options.disableAutoISOConversion || false\n    this.integrationSource = integrationSource\n\n    // AJS-Renderer sets an extraneous `type` setting that clobbers\n    // existing type defaults. We need to remove it if it's present\n    if (this.settings['type'] && this.settings['type'] === 'browser') {\n      delete this.settings['type']\n    }\n\n    this.options = options\n    this.buffer = options.disableClientPersistence\n      ? new PriorityQueue(4, [])\n      : new PersistedPriorityQueue(4, `${writeKey}:dest-${name}`)\n\n    this.scheduleFlush()\n  }\n\n  isLoaded(): boolean {\n    return this._ready\n  }\n\n  ready(): Promise<unknown> {\n    return this.onReady ?? Promise.resolve()\n  }\n\n  async load(ctx: Context, analyticsInstance: Analytics): Promise<void> {\n    if (this._ready || this.onReady !== undefined) {\n      return\n    }\n\n    const integrationSource =\n      this.integrationSource ??\n      (await loadIntegration(\n        ctx,\n        this.name,\n        this.version,\n        this.options.obfuscate\n      ))\n\n    this.integration = buildIntegration(\n      integrationSource,\n      this.settings,\n      analyticsInstance\n    )\n\n    this.onReady = new Promise((resolve) => {\n      const onReadyFn = (): void => {\n        this._ready = true\n        resolve(true)\n      }\n\n      this.integration!.once('ready', onReadyFn)\n    })\n\n    this.onInitialize = new Promise((resolve) => {\n      const onInit = (): void => {\n        this._initialized = true\n        resolve(true)\n      }\n\n      this.integration!.on('initialize', onInit)\n    })\n\n    try {\n      ctx.stats.increment('analytics_js.integration.invoke', 1, [\n        `method:initialize`,\n        `integration_name:${this.name}`,\n      ])\n\n      this.integration.initialize()\n    } catch (error) {\n      ctx.stats.increment('analytics_js.integration.invoke.error', 1, [\n        `method:initialize`,\n        `integration_name:${this.name}`,\n      ])\n\n      throw error\n    }\n  }\n\n  unload(_ctx: Context, _analyticsInstance: Analytics): Promise<void> {\n    return unloadIntegration(this.name, this.version, this.options.obfuscate)\n  }\n\n  addMiddleware(...fn: DestinationMiddlewareFunction[]): void {\n    this.middleware = this.middleware.concat(...fn)\n  }\n\n  shouldBuffer(ctx: Context): boolean {\n    return (\n      // page events can't be buffered because of destinations that automatically add page views\n      ctx.event.type !== 'page' &&\n      (isOffline() || this._ready === false || this._initialized === false)\n    )\n  }\n\n  private async send<T extends Facade>(\n    ctx: Context,\n    clz: ClassType<T>,\n    eventType: 'track' | 'identify' | 'page' | 'alias' | 'group'\n  ): Promise<Context> {\n    if (this.shouldBuffer(ctx)) {\n      this.buffer.push(ctx)\n      this.scheduleFlush()\n      return ctx\n    }\n\n    const plan = this.options?.plan?.track\n    const ev = ctx.event.event\n\n    if (plan && ev && this.name !== 'Segment.io') {\n      // events are always sent to segment (legacy behavior)\n      const planEvent = plan[ev]\n      if (!isPlanEventEnabled(plan, planEvent)) {\n        ctx.updateEvent('integrations', {\n          ...ctx.event.integrations,\n          All: false,\n          'Segment.io': true,\n        })\n        ctx.cancel(\n          new ContextCancelation({\n            retry: false,\n            reason: `Event ${ev} disabled for integration ${this.name} in tracking plan`,\n            type: 'Dropped by plan',\n          })\n        )\n        return ctx\n      } else {\n        ctx.updateEvent('integrations', {\n          ...ctx.event.integrations,\n          ...planEvent?.integrations,\n        })\n      }\n\n      if (planEvent?.enabled && planEvent?.integrations![this.name] === false) {\n        ctx.cancel(\n          new ContextCancelation({\n            retry: false,\n            reason: `Event ${ev} disabled for integration ${this.name} in tracking plan`,\n            type: 'Dropped by plan',\n          })\n        )\n        return ctx\n      }\n    }\n\n    const afterMiddleware = await applyDestinationMiddleware(\n      this.name,\n      ctx.event,\n      this.middleware\n    )\n\n    if (afterMiddleware === null) {\n      return ctx\n    }\n\n    const event = new clz(afterMiddleware, {\n      traverse: !this.disableAutoISOConversion,\n    })\n\n    ctx.stats.increment('analytics_js.integration.invoke', 1, [\n      `method:${eventType}`,\n      `integration_name:${this.name}`,\n    ])\n\n    try {\n      if (this.integration) {\n        await this.integration.invoke.call(this.integration, eventType, event)\n      }\n    } catch (err) {\n      ctx.stats.increment('analytics_js.integration.invoke.error', 1, [\n        `method:${eventType}`,\n        `integration_name:${this.name}`,\n      ])\n      throw err\n    }\n\n    return ctx\n  }\n\n  async track(ctx: Context): Promise<Context> {\n    return this.send(ctx, Track as ClassType<Track>, 'track')\n  }\n\n  async page(ctx: Context): Promise<Context> {\n    if (this.integration?._assumesPageview && !this._initialized) {\n      this.integration.initialize()\n    }\n\n    return this.onInitialize!.then(() => {\n      return this.send(ctx, Page as ClassType<Page>, 'page')\n    })\n  }\n\n  async identify(ctx: Context): Promise<Context> {\n    return this.send(ctx, Identify as ClassType<Identify>, 'identify')\n  }\n\n  async alias(ctx: Context): Promise<Context> {\n    return this.send(ctx, Alias as ClassType<Alias>, 'alias')\n  }\n\n  async group(ctx: Context): Promise<Context> {\n    return this.send(ctx, Group as ClassType<Group>, 'group')\n  }\n\n  private scheduleFlush(): void {\n    if (this.flushing) {\n      return\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    setTimeout(async () => {\n      this.flushing = true\n      this.buffer = await flushQueue(this, this.buffer)\n      this.flushing = false\n\n      if (this.buffer.todo > 0) {\n        this.scheduleFlush()\n      }\n    }, Math.random() * 5000)\n  }\n}\n\nexport function ajsDestinations(\n  writeKey: string,\n  settings: LegacySettings,\n  globalIntegrations: Integrations = {},\n  options: InitOptions = {},\n  routingMiddleware?: DestinationMiddlewareFunction,\n  legacyIntegrationSources?: ClassicIntegrationSource[]\n): LegacyDestination[] {\n  if (isServer()) {\n    return []\n  }\n\n  if (settings.plan) {\n    options = options ?? {}\n    options.plan = settings.plan\n  }\n\n  const routingRules = settings.middlewareSettings?.routingRules ?? []\n  const remoteIntegrationsConfig = settings.integrations\n  const localIntegrationsConfig = options.integrations\n  // merged remote CDN settings with user provided options\n  const integrationOptions = mergedOptions(settings, options ?? {}) as Record<\n    string,\n    JSONObject\n  >\n\n  const adhocIntegrationSources = legacyIntegrationSources?.reduce(\n    (acc, integrationSource) => ({\n      ...acc,\n      [resolveIntegrationNameFromSource(integrationSource)]: integrationSource,\n    }),\n    {} as Record<string, ClassicIntegrationSource>\n  )\n\n  const installableIntegrations = new Set([\n    // Remotely configured installable integrations\n    ...Object.keys(remoteIntegrationsConfig).filter((name) =>\n      isInstallableIntegration(name, remoteIntegrationsConfig[name])\n    ),\n\n    // Directly provided integration sources are only installable if settings for them are available\n    ...Object.keys(adhocIntegrationSources || {}).filter(\n      (name) =>\n        isPlainObject(remoteIntegrationsConfig[name]) ||\n        isPlainObject(localIntegrationsConfig?.[name])\n    ),\n  ])\n\n  return Array.from(installableIntegrations)\n    .filter((name) => !shouldSkipIntegration(name, globalIntegrations))\n    .map((name) => {\n      const integrationSettings = remoteIntegrationsConfig[name]\n      const version = resolveVersion(integrationSettings)\n      const destination = new LegacyDestination(\n        name,\n        version,\n        writeKey,\n        integrationOptions[name],\n        options,\n        adhocIntegrationSources?.[name]\n      )\n\n      const routing = routingRules.filter(\n        (rule) => rule.destinationName === name\n      )\n      if (routing.length > 0 && routingMiddleware) {\n        destination.addMiddleware(routingMiddleware)\n      }\n\n      return destination\n    })\n}\n"],"names":["isPlanEventEnabled","plan","planEvent","enabled","_b","_a","__default","normalizeName","name","toLowerCase","replace","obfuscatePathName","pathName","obfuscate","btoa","undefined","loadIntegration","ctx","version","obfuscatedPathName","path","getNextIntegrationsURL","fullPath","concat","loadScript","sent","metric","window","performance","getEntriesByName","stats","gauge","Math","round","duration","__spreadArray","_","recordLoadMetrics","err_1","deps","Promise","all","map","dep","isInstallableIntegration","integrationSettings","type","bundlingStatus","versionSettings","deviceMode","componentTypes","includes","startsWith","isDisabledIntegration","integrationName","globalIntegrations","allDisableAndNotDefined","All","flushQueue","xt","queue","failedQueue","isOffline","pWhile","length","isOnline","__awaiter","_this","pop","attempt","result","Context","push","failed","pushWithBackoff","LegacyDestination","writeKey","settings","options","integrationSource","middleware","_ready","_initialized","flushing","this","__assign","disableAutoISOConversion","buffer","disableClientPersistence","PriorityQueue","PersistedPriorityQueue","scheduleFlush","prototype","isLoaded","ready","onReady","resolve","load","analyticsInstance","_c","integration","integrationCtr","user","addIntegration","Integration","analytics","buildIntegration","once","onInitialize","on","increment","initialize","error","unload","_ctx","_analyticsInstance","unloadScript","unloadIntegration","addMiddleware","fn","_i","arguments","apply","shouldBuffer","event","send","clz","eventType","track","ev","updateEvent","integrations","cancel","ContextCancelation","retry","reason","applyDestinationMiddleware","afterMiddleware","traverse","invoke","call","Track","page","_assumesPageview","then","Page","identify","Identify","alias","Alias","group","Group","setTimeout","todo","random","ajsDestinations","routingMiddleware","legacyIntegrationSources","isServer","routingRules","middlewareSettings","remoteIntegrationsConfig","localIntegrationsConfig","integrationOptions","mergedOptions","adhocIntegrationSources","reduce","acc","resolveIntegrationNameFromSource","installableIntegrations","Set","Object","keys","filter","isPlainObject","Array","from","shouldSkipIntegration","_d","override","resolveVersion","destination","rule","destinationName"],"sourceRoot":""}