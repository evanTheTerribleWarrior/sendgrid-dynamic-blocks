{"version":3,"file":"static/js/auto-track.50090b87.chunk.js","mappings":"iNAmCM,SAAUA,EAEdC,EACAC,EACAC,EACAC,GALF,IAAAC,EAAA,KASE,OAAKJ,IAGDA,aAAiBK,QACR,CAACL,GACH,YAAaA,EACXA,EAAMM,UAENN,GAGJO,SAAQ,SAACC,GAChBA,EAAGC,iBACD,SACA,SAACC,G,QACOC,EAAKV,aAAiBW,SAAWX,EAAMO,GAAMP,EAC7CY,EACJX,aAAsBU,SAAWV,EAAWM,GAAMN,EAC9CY,EACJN,EAAGO,aAAa,SAChBP,EAAGQ,eAAe,+BAAgC,SAClDR,EAAGO,aAAa,gBACe,QAA/BE,EAAAT,EAAGU,qBAAqB,KAAK,UAAE,IAAAD,OAAA,EAAAA,EAAEF,aAAa,SAE1CI,GAAaC,EAAAA,EAAAA,IACjBhB,EAAKiB,MAAMV,EAAIE,EAAc,OAAPV,QAAO,IAAPA,EAAAA,EAAW,CAAC,GACb,QAArBmB,EAAAlB,EAAKmB,SAASC,eAAO,IAAAF,EAAAA,EAAI,MA9CnC,SAAoBG,EAA4BX,GAC9C,QAAuB,WAAnBW,EAAQC,SAAuBZ,EAIrC,EA6CWa,CAAWnB,EAAyBM,IArE/C,SAAoBb,GAClB,IAAM2B,EAAa3B,EAMnB,SACE2B,EAAWC,SACXD,EAAWE,UACXF,EAAWG,SACVH,EAAWI,QAA+B,GAArBJ,EAAWI,OAKrC,CAsDWC,CAAWvB,IAERI,IACFJ,EAAawB,eACTxB,EAAawB,iBACZxB,EAAayB,aAAc,EAChChB,EACGiB,MAAMC,QAAQC,OACdC,MAAK,WACJC,OAAOC,SAAS3B,KAAOA,CACzB,IACCsB,MAAMC,QAAQC,OAGvB,IACA,EAEJ,IAEOI,MAjDEA,IAkDX,CAIM,SAAUC,EAEdC,EACA3C,EACAC,EACAC,GALF,IAAAC,EAAA,KAQE,OAAKwC,GACDA,aAAiBC,kBAAiBD,EAAQ,CAACA,IAE9BA,EAERrC,SAAQ,SAACC,GAChB,KAAMA,aAAcH,SAClB,MAAM,IAAIyC,UAAU,mDACtB,IAAMC,EAAU,SAACrC,G,MACfA,EAAawB,eACTxB,EAAawB,iBACZxB,EAAayB,aAAc,EAEhC,IAAMxB,EAAKV,aAAiBW,SAAWX,EAAMO,GAAMP,EAC7CY,EAAQX,aAAsBU,SAAWV,EAAWM,GAAMN,GAE7CkB,EAAAA,EAAAA,IACjBhB,EAAKiB,MAAMV,EAAIE,EAAc,OAAPV,QAAO,IAAPA,EAAAA,EAAW,CAAC,GACb,QAArBc,EAAAb,EAAKmB,SAASC,eAAO,IAAAP,EAAAA,EAAI,KAIxBmB,MAAMC,QAAQC,OACdC,MAAK,WACJ/B,EAAGwC,QACL,IACCZ,MAAMC,QAAQC,MACnB,EAKMW,EAAKT,OAAeU,QAAWV,OAAeW,MAChDF,EACFA,EAAEzC,GAAIwC,OAAOD,GAGbvC,EAAGC,iBAAiB,SAAUsC,GAAS,EAE3C,IAEOL,MAzCYA,IA0CrB,C","sources":["../node_modules/@segment/analytics-next/src/core/auto-track.ts"],"sourcesContent":["import { Analytics } from './analytics'\nimport { EventProperties, Options } from './events'\nimport { pTimeout } from './callback'\n\n// Check if a user is opening the link in a new tab\nfunction userNewTab(event: Event): boolean {\n  const typedEvent = event as Event & {\n    ctrlKey: boolean\n    shiftKey: boolean\n    metaKey: boolean\n    button: number\n  }\n  if (\n    typedEvent.ctrlKey ||\n    typedEvent.shiftKey ||\n    typedEvent.metaKey ||\n    (typedEvent.button && typedEvent.button == 1)\n  ) {\n    return true\n  }\n  return false\n}\n\n// Check if the link opens in new tab\nfunction linkNewTab(element: HTMLAnchorElement, href: string | null): boolean {\n  if (element.target === '_blank' && href) {\n    return true\n  }\n  return false\n}\n\nexport interface JQueryShim<TElement = HTMLElement> {\n  toArray(): TElement[]\n}\n\nexport function link(\n  this: Analytics,\n  links: Element | Array<Element> | JQueryShim | null,\n  event: string | Function,\n  properties?: EventProperties | Function,\n  options?: Options\n): Analytics {\n  let elements: Array<Element> = []\n  // always arrays, handles jquery\n  if (!links) {\n    return this\n  }\n  if (links instanceof Element) {\n    elements = [links]\n  } else if ('toArray' in links) {\n    elements = links.toArray()\n  } else {\n    elements = links\n  }\n\n  elements.forEach((el: Element) => {\n    el.addEventListener(\n      'click',\n      (elementEvent: Event) => {\n        const ev = event instanceof Function ? event(el) : event\n        const props =\n          properties instanceof Function ? properties(el) : properties\n        const href =\n          el.getAttribute('href') ||\n          el.getAttributeNS('http://www.w3.org/1999/xlink', 'href') ||\n          el.getAttribute('xlink:href') ||\n          el.getElementsByTagName('a')[0]?.getAttribute('href')\n\n        const trackEvent = pTimeout(\n          this.track(ev, props, options ?? {}),\n          this.settings.timeout ?? 500\n        )\n\n        if (\n          !linkNewTab(el as HTMLAnchorElement, href) &&\n          !userNewTab(elementEvent)\n        ) {\n          if (href) {\n            elementEvent.preventDefault\n              ? elementEvent.preventDefault()\n              : (elementEvent.returnValue = false)\n            trackEvent\n              .catch(console.error)\n              .then(() => {\n                window.location.href = href\n              })\n              .catch(console.error)\n          }\n        }\n      },\n      false\n    )\n  })\n\n  return this\n}\n\nexport type LinkArgs = Parameters<typeof link>\n\nexport function form(\n  this: Analytics,\n  forms: HTMLFormElement | Array<HTMLFormElement> | null,\n  event: string | Function,\n  properties?: EventProperties | Function,\n  options?: Options\n): Analytics {\n  // always arrays, handles jquery\n  if (!forms) return this\n  if (forms instanceof HTMLFormElement) forms = [forms]\n\n  const elements = forms\n\n  elements.forEach((el) => {\n    if (!(el instanceof Element))\n      throw new TypeError('Must pass HTMLElement to trackForm/trackSubmit.')\n    const handler = (elementEvent: Event): void => {\n      elementEvent.preventDefault\n        ? elementEvent.preventDefault()\n        : (elementEvent.returnValue = false)\n\n      const ev = event instanceof Function ? event(el) : event\n      const props = properties instanceof Function ? properties(el) : properties\n\n      const trackEvent = pTimeout(\n        this.track(ev, props, options ?? {}),\n        this.settings.timeout ?? 500\n      )\n\n      trackEvent\n        .catch(console.error)\n        .then(() => {\n          el.submit()\n        })\n        .catch(console.error)\n    }\n\n    // Support the events happening through jQuery or Zepto instead of through\n    // the normal DOM API, because `el.submit` doesn't bubble up events...\n\n    const $ = (window as any).jQuery || (window as any).Zepto\n    if ($) {\n      $(el).submit(handler)\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-misused-promises\n      el.addEventListener('submit', handler, false)\n    }\n  })\n\n  return this\n}\n\nexport type FormArgs = Parameters<typeof form>\n"],"names":["link","links","event","properties","options","_this","Element","toArray","forEach","el","addEventListener","elementEvent","ev","Function","props","href","getAttribute","getAttributeNS","_a","getElementsByTagName","trackEvent","pTimeout","track","_b","settings","timeout","element","target","linkNewTab","typedEvent","ctrlKey","shiftKey","metaKey","button","userNewTab","preventDefault","returnValue","catch","console","error","then","window","location","this","form","forms","HTMLFormElement","TypeError","handler","submit","$","jQuery","Zepto"],"sourceRoot":""}